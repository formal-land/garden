(* Generated by Garden *)
Require Import Garden.Garden.

(* Template signals *)
Module Ch_tSignals.
  Record t : Set := {
    a : list F.t;
    b : list F.t;
    c : list F.t;
    out : list F.t;
  }.
End Ch_tSignals.

(* Template body *)
Definition Ch_t (n : F.t) : M.t (BlockUnit.t Empty_set) :=
  (* Signal Input *)
  do~ M.declare_signal "a" [[ [ M.var ~(| "n" |) ] ]] in
  (* Signal Input *)
  do~ M.declare_signal "b" [[ [ M.var ~(| "n" |) ] ]] in
  (* Signal Input *)
  do~ M.declare_signal "c" [[ [ M.var ~(| "n" |) ] ]] in
  (* Signal Output *)
  do~ M.declare_signal "out" [[ [ M.var ~(| "n" |) ] ]] in
  (* Var *)
  do~ M.declare_var "k" [[ ([] : list F.t) ]] in
  do~ M.substitute_var "k" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var ~(| "k" |), M.var ~(| "n" |) |) ]] (
    do~ M.substitute_var "out" [[ InfixOp.add ~(| InfixOp.mul ~(| M.var_access ~(| "a", [Access.Array (M.var ~(| "k" |))] |), InfixOp.sub ~(| M.var_access ~(| "b", [Access.Array (M.var ~(| "k" |))] |), M.var_access ~(| "c", [Access.Array (M.var ~(| "k" |))] |) |) |), M.var_access ~(| "c", [Access.Array (M.var ~(| "k" |))] |) |) ]] in
    do~ M.substitute_var "k" [[ InfixOp.add ~(| M.var ~(| "k" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  M.pure BlockUnit.Tt.
