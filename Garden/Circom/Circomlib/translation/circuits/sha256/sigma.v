(* Generated by Garden *)
Require Import Garden.Garden.

(* Template signals *)
Module SmallSigmaSignals.
  Record t : Set := {
    (* Input *)
    in_ : list F.t;
    (* Output *)
    out : list F.t;
  }.

  Module IsNamed.
    Inductive P : forall (A : Set), (t -> A) -> string -> Prop :=
    | in_ : P _ in_ "in"
    | out : P _ out "out".
  End IsNamed.
End SmallSigmaSignals.

(* Template body *)
Definition SmallSigma (ra rb rc : F.t) : M.t (BlockUnit.t Empty_set) :=
  M.template_body [("ra", ra); ("rb", rb); ("rc", rc)] (
    (* Signal Input *)
    do~ M.declare_signal "in" in
    (* Signal Output *)
    do~ M.declare_signal "out" in
    (* Var *)
    do~ M.declare_var "k" [[ ([] : list F.t) ]] in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    (* Component *)
    do~ M.declare_component "rota" in
    do~ M.substitute_var "rota" [] [[ M.call_function ~(| "RotR", [ 32; M.var (| "ra" |) ] |) ]] in
    (* Component *)
    do~ M.declare_component "rotb" in
    do~ M.substitute_var "rotb" [] [[ M.call_function ~(| "RotR", [ 32; M.var (| "rb" |) ] |) ]] in
    (* Component *)
    do~ M.declare_component "shrc" in
    do~ M.substitute_var "shrc" [] [[ M.call_function ~(| "ShR", [ 32; M.var (| "rc" |) ] |) ]] in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
      do~ M.substitute_var "rota" [Access.Component "in"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "in", [Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "rotb" [Access.Component "in"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "in", [Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "shrc" [Access.Component "in"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "in", [Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "k" [] [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    (* Component *)
    do~ M.declare_component "xor3" in
    do~ M.substitute_var "xor3" [] [[ M.call_function ~(| "Xor3", [ 32 ] |) ]] in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
      do~ M.substitute_var "xor3" [Access.Component "a"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "rota", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "xor3" [Access.Component "b"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "rotb", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "xor3" [Access.Component "c"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "shrc", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "k" [] [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
      do~ M.substitute_var "out" [Access.Array (M.var (| "k" |))] [[ M.var_access (| "xor3", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "k" [] [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    M.pure BlockUnit.Tt
  ).

(* Template not under-constrained *)
Definition SmallSigma_not_under_constrained (ra rb rc : F.t) in_ : Prop :=
  exists! out,
  let signals := SmallSigmaSignals.Build_t in_ out in
  True (* NotUnderConstrained SmallSigma ra rb rc signals *).

(* Template signals *)
Module BigSigmaSignals.
  Record t : Set := {
    (* Input *)
    in_ : list F.t;
    (* Output *)
    out : list F.t;
  }.

  Module IsNamed.
    Inductive P : forall (A : Set), (t -> A) -> string -> Prop :=
    | in_ : P _ in_ "in"
    | out : P _ out "out".
  End IsNamed.
End BigSigmaSignals.

(* Template body *)
Definition BigSigma (ra rb rc : F.t) : M.t (BlockUnit.t Empty_set) :=
  M.template_body [("ra", ra); ("rb", rb); ("rc", rc)] (
    (* Signal Input *)
    do~ M.declare_signal "in" in
    (* Signal Output *)
    do~ M.declare_signal "out" in
    (* Var *)
    do~ M.declare_var "k" [[ ([] : list F.t) ]] in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    (* Component *)
    do~ M.declare_component "rota" in
    do~ M.substitute_var "rota" [] [[ M.call_function ~(| "RotR", [ 32; M.var (| "ra" |) ] |) ]] in
    (* Component *)
    do~ M.declare_component "rotb" in
    do~ M.substitute_var "rotb" [] [[ M.call_function ~(| "RotR", [ 32; M.var (| "rb" |) ] |) ]] in
    (* Component *)
    do~ M.declare_component "rotc" in
    do~ M.substitute_var "rotc" [] [[ M.call_function ~(| "RotR", [ 32; M.var (| "rc" |) ] |) ]] in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
      do~ M.substitute_var "rota" [Access.Component "in"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "in", [Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "rotb" [Access.Component "in"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "in", [Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "rotc" [Access.Component "in"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "in", [Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "k" [] [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    (* Component *)
    do~ M.declare_component "xor3" in
    do~ M.substitute_var "xor3" [] [[ M.call_function ~(| "Xor3", [ 32 ] |) ]] in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
      do~ M.substitute_var "xor3" [Access.Component "a"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "rota", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "xor3" [Access.Component "b"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "rotb", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "xor3" [Access.Component "c"; Access.Array (M.var (| "k" |))] [[ M.var_access (| "rotc", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "k" [] [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "k" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
      do~ M.substitute_var "out" [Access.Array (M.var (| "k" |))] [[ M.var_access (| "xor3", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
      do~ M.substitute_var "k" [] [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    M.pure BlockUnit.Tt
  ).

(* Template not under-constrained *)
Definition BigSigma_not_under_constrained (ra rb rc : F.t) in_ : Prop :=
  exists! out,
  let signals := BigSigmaSignals.Build_t in_ out in
  True (* NotUnderConstrained BigSigma ra rb rc signals *).
