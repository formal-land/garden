(* Generated by Garden *)
Require Import Garden.Garden.

(* Template signals *)
Module SigmaPlusSignals.
  Record t : Set := {
    in2 : list F.t;
    in7 : list F.t;
    in15 : list F.t;
    in16 : list F.t;
    out : list F.t;
  }.
End SigmaPlusSignals.

(* Template body *)
Definition SigmaPlus : M.t (BlockUnit.t Empty_set) :=
  (* Signal Input *)
  do~ M.declare_signal "in2" [[ [ 32 ] ]] in
  (* Signal Input *)
  do~ M.declare_signal "in7" [[ [ 32 ] ]] in
  (* Signal Input *)
  do~ M.declare_signal "in15" [[ [ 32 ] ]] in
  (* Signal Input *)
  do~ M.declare_signal "in16" [[ [ 32 ] ]] in
  (* Signal Output *)
  do~ M.declare_signal "out" [[ [ 32 ] ]] in
  (* Var *)
  do~ M.declare_var "k" [[ ([] : list F.t) ]] in
  do~ M.substitute_var "k" [[ 0 ]] in
  (* Component *)
  do~ M.declare_component "sigma1" in
  do~ M.substitute_var "sigma1" [[ M.call_function ~(| "SmallSigma", [ 17; 19; 10 ] |) ]] in
  (* Component *)
  do~ M.declare_component "sigma0" in
  do~ M.substitute_var "sigma0" [[ M.call_function ~(| "SmallSigma", [ 7; 18; 3 ] |) ]] in
  do~ M.substitute_var "k" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
    do~ M.substitute_var "sigma1" [[ M.var_access (| "in2", [Access.Array (M.var (| "k" |))] |) ]] in
    do~ M.substitute_var "sigma0" [[ M.var_access (| "in15", [Access.Array (M.var (| "k" |))] |) ]] in
    do~ M.substitute_var "k" [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  (* Component *)
  do~ M.declare_component "sum" in
  do~ M.substitute_var "sum" [[ M.call_function ~(| "BinSum", [ 32; 4 ] |) ]] in
  do~ M.substitute_var "k" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
    do~ M.substitute_var "sum" [[ M.var_access (| "sigma1", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
    do~ M.substitute_var "sum" [[ M.var_access (| "in7", [Access.Array (M.var (| "k" |))] |) ]] in
    do~ M.substitute_var "sum" [[ M.var_access (| "sigma0", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
    do~ M.substitute_var "sum" [[ M.var_access (| "in16", [Access.Array (M.var (| "k" |))] |) ]] in
    do~ M.substitute_var "k" [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  do~ M.substitute_var "k" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var (| "k" |), 32 |) ]] (
    do~ M.substitute_var "out" [[ M.var_access (| "sum", [Access.Component "out"; Access.Array (M.var (| "k" |))] |) ]] in
    do~ M.substitute_var "k" [[ InfixOp.add ~(| M.var (| "k" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  M.pure BlockUnit.Tt.
