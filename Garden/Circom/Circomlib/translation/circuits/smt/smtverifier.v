(* Generated by Garden *)
Require Import Garden.Garden.

(* Template signals *)
Module SMTVerifierSignals.
  Record t : Set := {
    enabled : F.t;
    root : F.t;
    siblings : list F.t;
    oldKey : F.t;
    oldValue : F.t;
    isOld0 : F.t;
    key : F.t;
    value : F.t;
    fnc : F.t;
  }.
End SMTVerifierSignals.

(* Template body *)
Definition SMTVerifier (nLevels : F.t) : M.t (BlockUnit.t Empty_set) :=
  (* Signal Input *)
  do~ M.declare_signal "enabled" [[ ([] : list F.t) ]] in
  (* Signal Input *)
  do~ M.declare_signal "root" [[ ([] : list F.t) ]] in
  (* Signal Input *)
  do~ M.declare_signal "siblings" [[ [ M.var (| "nLevels" |) ] ]] in
  (* Signal Input *)
  do~ M.declare_signal "oldKey" [[ ([] : list F.t) ]] in
  (* Signal Input *)
  do~ M.declare_signal "oldValue" [[ ([] : list F.t) ]] in
  (* Signal Input *)
  do~ M.declare_signal "isOld0" [[ ([] : list F.t) ]] in
  (* Signal Input *)
  do~ M.declare_signal "key" [[ ([] : list F.t) ]] in
  (* Signal Input *)
  do~ M.declare_signal "value" [[ ([] : list F.t) ]] in
  (* Signal Input *)
  do~ M.declare_signal "fnc" [[ ([] : list F.t) ]] in
  (* Var *)
  do~ M.declare_var "i" [[ ([] : list F.t) ]] in
  do~ M.substitute_var "i" [[ 0 ]] in
  (* Component *)
  do~ M.declare_component "hash1Old" in
  do~ M.substitute_var "hash1Old" [[ M.call_function ~(| "SMTHash1", ([] : list F.t) |) ]] in
  do~ M.substitute_var "hash1Old" [[ M.var (| "oldKey" |) ]] in
  do~ M.substitute_var "hash1Old" [[ M.var (| "oldValue" |) ]] in
  (* Component *)
  do~ M.declare_component "hash1New" in
  do~ M.substitute_var "hash1New" [[ M.call_function ~(| "SMTHash1", ([] : list F.t) |) ]] in
  do~ M.substitute_var "hash1New" [[ M.var (| "key" |) ]] in
  do~ M.substitute_var "hash1New" [[ M.var (| "value" |) ]] in
  (* Component *)
  do~ M.declare_component "n2bOld" in
  do~ M.substitute_var "n2bOld" [[ M.call_function ~(| "Num2Bits_strict", ([] : list F.t) |) ]] in
  (* Component *)
  do~ M.declare_component "n2bNew" in
  do~ M.substitute_var "n2bNew" [[ M.call_function ~(| "Num2Bits_strict", ([] : list F.t) |) ]] in
  do~ M.substitute_var "n2bOld" [[ M.var (| "oldKey" |) ]] in
  do~ M.substitute_var "n2bNew" [[ M.var (| "key" |) ]] in
  (* Component *)
  do~ M.declare_component "smtLevIns" in
  do~ M.substitute_var "smtLevIns" [[ M.call_function ~(| "SMTLevIns", [ M.var (| "nLevels" |) ] |) ]] in
  do~ M.substitute_var "i" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), M.var (| "nLevels" |) |) ]] (
    do~ M.substitute_var "smtLevIns" [[ M.var_access (| "siblings", [Access.Array (M.var (| "i" |))] |) ]] in
    do~ M.substitute_var "i" [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  do~ M.substitute_var "smtLevIns" [[ M.var (| "enabled" |) ]] in
  (* Component *)
  do~ M.declare_component "sm" in
  do~ M.substitute_var "i" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), M.var (| "nLevels" |) |) ]] (
    do~ M.substitute_var "sm" [[ M.call_function ~(| "SMTVerifierSM", ([] : list F.t) |) ]] in
    do~ M.if_ [[ InfixOp.eq ~(| M.var (| "i" |), 0 |) ]] (* then *) (
      do~ M.substitute_var "sm" [[ M.var (| "enabled" |) ]] in
      do~ M.substitute_var "sm" [[ 0 ]] in
      do~ M.substitute_var "sm" [[ 0 ]] in
      do~ M.substitute_var "sm" [[ 0 ]] in
      do~ M.substitute_var "sm" [[ InfixOp.sub ~(| 1, M.var (| "enabled" |) |) ]] in
      M.pure BlockUnit.Tt
    ) (* else *) (
      do~ M.substitute_var "sm" [[ M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "i" |), 1 |)); Access.Component "st_top"] |) ]] in
      do~ M.substitute_var "sm" [[ M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "i" |), 1 |)); Access.Component "st_i0"] |) ]] in
      do~ M.substitute_var "sm" [[ M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "i" |), 1 |)); Access.Component "st_inew"] |) ]] in
      do~ M.substitute_var "sm" [[ M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "i" |), 1 |)); Access.Component "st_iold"] |) ]] in
      do~ M.substitute_var "sm" [[ M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "i" |), 1 |)); Access.Component "st_na"] |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "sm" [[ M.var (| "isOld0" |) ]] in
    do~ M.substitute_var "sm" [[ M.var (| "fnc" |) ]] in
    do~ M.substitute_var "sm" [[ M.var_access (| "smtLevIns", [Access.Component "levIns"; Access.Array (M.var (| "i" |))] |) ]] in
    do~ M.substitute_var "i" [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  do~ M.equality_constraint
    [[ InfixOp.add ~(| InfixOp.add ~(| InfixOp.add ~(| M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "nLevels" |), 1 |)); Access.Component "st_na"] |), M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "nLevels" |), 1 |)); Access.Component "st_iold"] |) |), M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "nLevels" |), 1 |)); Access.Component "st_inew"] |) |), M.var_access (| "sm", [Access.Array (InfixOp.sub ~(| M.var (| "nLevels" |), 1 |)); Access.Component "st_i0"] |) |) ]]
    [[ 1 ]]
  in
  (* Component *)
  do~ M.declare_component "levels" in
  do~ M.substitute_var "i" [[ InfixOp.sub ~(| M.var (| "nLevels" |), 1 |) ]] in
  do~ M.while [[ InfixOp.notEq ~(| M.var (| "i" |), PrefixOp.sub ~(| 1 |) |) ]] (
    do~ M.substitute_var "levels" [[ M.call_function ~(| "SMTVerifierLevel", ([] : list F.t) |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "sm", [Access.Array (M.var (| "i" |)); Access.Component "st_top"] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "sm", [Access.Array (M.var (| "i" |)); Access.Component "st_i0"] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "sm", [Access.Array (M.var (| "i" |)); Access.Component "st_inew"] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "sm", [Access.Array (M.var (| "i" |)); Access.Component "st_iold"] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "sm", [Access.Array (M.var (| "i" |)); Access.Component "st_na"] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "siblings", [Access.Array (M.var (| "i" |))] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "hash1Old", [Access.Component "out"] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "hash1New", [Access.Component "out"] |) ]] in
    do~ M.substitute_var "levels" [[ M.var_access (| "n2bNew", [Access.Component "out"; Access.Array (M.var (| "i" |))] |) ]] in
    do~ M.if_ [[ InfixOp.eq ~(| M.var (| "i" |), InfixOp.sub ~(| M.var (| "nLevels" |), 1 |) |) ]] (* then *) (
      do~ M.substitute_var "levels" [[ 0 ]] in
      M.pure BlockUnit.Tt
    ) (* else *) (
      do~ M.substitute_var "levels" [[ M.var_access (| "levels", [Access.Array (InfixOp.add ~(| M.var (| "i" |), 1 |)); Access.Component "root"] |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "i" [[ InfixOp.sub ~(| M.var (| "i" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  (* Component *)
  do~ M.declare_component "areKeyEquals" in
  do~ M.substitute_var "areKeyEquals" [[ M.call_function ~(| "IsEqual", ([] : list F.t) |) ]] in
  do~ M.substitute_var "areKeyEquals" [[ M.var (| "oldKey" |) ]] in
  do~ M.substitute_var "areKeyEquals" [[ M.var (| "key" |) ]] in
  (* Component *)
  do~ M.declare_component "keysOk" in
  do~ M.substitute_var "keysOk" [[ M.call_function ~(| "MultiAND", [ 4 ] |) ]] in
  do~ M.substitute_var "keysOk" [[ M.var (| "fnc" |) ]] in
  do~ M.substitute_var "keysOk" [[ InfixOp.sub ~(| 1, M.var (| "isOld0" |) |) ]] in
  do~ M.substitute_var "keysOk" [[ M.var_access (| "areKeyEquals", [Access.Component "out"] |) ]] in
  do~ M.substitute_var "keysOk" [[ M.var (| "enabled" |) ]] in
  do~ M.equality_constraint
    [[ M.var_access (| "keysOk", [Access.Component "out"] |) ]]
    [[ 0 ]]
  in
  (* Component *)
  do~ M.declare_component "checkRoot" in
  do~ M.substitute_var "checkRoot" [[ M.call_function ~(| "ForceEqualIfEnabled", ([] : list F.t) |) ]] in
  do~ M.substitute_var "checkRoot" [[ M.var (| "enabled" |) ]] in
  do~ M.substitute_var "checkRoot" [[ M.var_access (| "levels", [Access.Array (0); Access.Component "root"] |) ]] in
  do~ M.substitute_var "checkRoot" [[ M.var (| "root" |) ]] in
  M.pure BlockUnit.Tt.
