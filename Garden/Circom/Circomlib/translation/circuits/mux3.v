(* Generated by Garden *)
Require Import Circom.M.

(* Template signals *)
Module MultiMux3Signals.
  Record t : Set := {
    (* Input *)
    c : list (list F.t);
    (* Input *)
    s : list F.t;
    (* Output *)
    out : list F.t;
    (* Intermediate *)
    a210 : list F.t;
    (* Intermediate *)
    a21 : list F.t;
    (* Intermediate *)
    a20 : list F.t;
    (* Intermediate *)
    a2 : list F.t;
    (* Intermediate *)
    a10 : list F.t;
    (* Intermediate *)
    a1 : list F.t;
    (* Intermediate *)
    a0 : list F.t;
    (* Intermediate *)
    a : list F.t;
    (* Intermediate *)
    s10 : F.t;
  }.

  Module IsNamed.
    Inductive P : forall (A : Set), (t -> A) -> string -> Prop :=
    | c : P _ c "c"
    | s : P _ s "s"
    | out : P _ out "out"
    | a210 : P _ a210 "a210"
    | a21 : P _ a21 "a21"
    | a20 : P _ a20 "a20"
    | a2 : P _ a2 "a2"
    | a10 : P _ a10 "a10"
    | a1 : P _ a1 "a1"
    | a0 : P _ a0 "a0"
    | a : P _ a "a"
    | s10 : P _ s10 "s10".
  End IsNamed.
End MultiMux3Signals.

(* Template body *)
Definition MultiMux3 (n : F.t) : M.t (BlockUnit.t Empty_set) :=
  M.template_body [("n", n)] (
    (* Signal Input *)
    do~ M.declare_signal "c" in
    (* Signal Input *)
    do~ M.declare_signal "s" in
    (* Signal Output *)
    do~ M.declare_signal "out" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a210" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a21" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a20" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a2" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a10" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a1" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a0" in
    (* Signal Intermediate *)
    do~ M.declare_signal "a" in
    (* Signal Intermediate *)
    do~ M.declare_signal "s10" in
    do~ M.substitute_var "s10" [] [[ InfixOp.mul ~(| M.var_access (| "s", [Access.Array (1)] |), M.var_access (| "s", [Access.Array (0)] |) |) ]] in
    (* Var *)
    do~ M.declare_var "i" [[ ([] : list F.t) ]] in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), M.var (| "n" |) |) ]] (
      do~ M.substitute_var "a210" [Access.Array (M.var (| "i" |))] [[ InfixOp.mul ~(| InfixOp.sub ~(| InfixOp.add ~(| InfixOp.add ~(| InfixOp.sub ~(| InfixOp.add ~(| InfixOp.sub ~(| InfixOp.sub ~(| M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (7)] |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (6)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (5)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (4)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (3)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (2)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (1)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) |), M.var (| "s10" |) |) ]] in
      do~ M.substitute_var "a21" [Access.Array (M.var (| "i" |))] [[ InfixOp.mul ~(| InfixOp.add ~(| InfixOp.sub ~(| InfixOp.sub ~(| M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (6)] |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (4)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (2)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) |), M.var_access (| "s", [Access.Array (1)] |) |) ]] in
      do~ M.substitute_var "a20" [Access.Array (M.var (| "i" |))] [[ InfixOp.mul ~(| InfixOp.add ~(| InfixOp.sub ~(| InfixOp.sub ~(| M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (5)] |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (4)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (1)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) |), M.var_access (| "s", [Access.Array (0)] |) |) ]] in
      do~ M.substitute_var "a2" [Access.Array (M.var (| "i" |))] [[ InfixOp.sub ~(| M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (4)] |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) |) ]] in
      do~ M.substitute_var "a10" [Access.Array (M.var (| "i" |))] [[ InfixOp.mul ~(| InfixOp.add ~(| InfixOp.sub ~(| InfixOp.sub ~(| M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (3)] |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (2)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (1)] |) |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) |), M.var (| "s10" |) |) ]] in
      do~ M.substitute_var "a1" [Access.Array (M.var (| "i" |))] [[ InfixOp.mul ~(| InfixOp.sub ~(| M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (2)] |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) |), M.var_access (| "s", [Access.Array (1)] |) |) ]] in
      do~ M.substitute_var "a0" [Access.Array (M.var (| "i" |))] [[ InfixOp.mul ~(| InfixOp.sub ~(| M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (1)] |), M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) |), M.var_access (| "s", [Access.Array (0)] |) |) ]] in
      do~ M.substitute_var "a" [Access.Array (M.var (| "i" |))] [[ M.var_access (| "c", [Access.Array (M.var (| "i" |)); Access.Array (0)] |) ]] in
      do~ M.substitute_var "out" [Access.Array (M.var (| "i" |))] [[ InfixOp.add ~(| InfixOp.mul ~(| InfixOp.add ~(| InfixOp.add ~(| InfixOp.add ~(| M.var_access (| "a210", [Access.Array (M.var (| "i" |))] |), M.var_access (| "a21", [Access.Array (M.var (| "i" |))] |) |), M.var_access (| "a20", [Access.Array (M.var (| "i" |))] |) |), M.var_access (| "a2", [Access.Array (M.var (| "i" |))] |) |), M.var_access (| "s", [Access.Array (2)] |) |), InfixOp.add ~(| InfixOp.add ~(| InfixOp.add ~(| M.var_access (| "a10", [Access.Array (M.var (| "i" |))] |), M.var_access (| "a1", [Access.Array (M.var (| "i" |))] |) |), M.var_access (| "a0", [Access.Array (M.var (| "i" |))] |) |), M.var_access (| "a", [Access.Array (M.var (| "i" |))] |) |) |) ]] in
      do~ M.substitute_var "i" [] [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    M.pure BlockUnit.Tt
  ).

(* Template not under-constrained *)
Definition MultiMux3_not_under_constrained (n : F.t) c s : Prop :=
  exists! out,
  exists a210 a21 a20 a2 a10 a1 a0 a s10,
  let signals := MultiMux3Signals.Build_t c s out a210 a21 a20 a2 a10 a1 a0 a s10 in
  True (* NotUnderConstrained MultiMux3 n signals *).

(* Template signals *)
Module Mux3Signals.
  Record t : Set := {
    (* Input *)
    c : list F.t;
    (* Input *)
    s : list F.t;
    (* Output *)
    out : F.t;
  }.

  Module IsNamed.
    Inductive P : forall (A : Set), (t -> A) -> string -> Prop :=
    | c : P _ c "c"
    | s : P _ s "s"
    | out : P _ out "out".
  End IsNamed.
End Mux3Signals.

(* Template body *)
Definition Mux3 : M.t (BlockUnit.t Empty_set) :=
  M.template_body [] (
    (* Var *)
    do~ M.declare_var "i" [[ ([] : list F.t) ]] in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    (* Signal Input *)
    do~ M.declare_signal "c" in
    (* Signal Input *)
    do~ M.declare_signal "s" in
    (* Signal Output *)
    do~ M.declare_signal "out" in
    (* Component *)
    do~ M.declare_component "mux" in
    do~ M.substitute_var "mux" [] [[ M.call_function ~(| "MultiMux3", [ 1 ] |) ]] in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), 8 |) ]] (
      do~ M.substitute_var "mux" [Access.Component "c"; Access.Array (0); Access.Array (M.var (| "i" |))] [[ M.var_access (| "c", [Access.Array (M.var (| "i" |))] |) ]] in
      do~ M.substitute_var "i" [] [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), 3 |) ]] (
      do~ M.substitute_var "mux" [Access.Component "s"; Access.Array (M.var (| "i" |))] [[ M.var_access (| "s", [Access.Array (M.var (| "i" |))] |) ]] in
      do~ M.substitute_var "i" [] [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "out" [] [[ M.var_access (| "mux", [Access.Component "out"; Access.Array (0)] |) ]] in
    M.pure BlockUnit.Tt
  ).

(* Template not under-constrained *)
Definition Mux3_not_under_constrained c s : Prop :=
  exists! out,
  let signals := Mux3Signals.Build_t c s out in
  True (* NotUnderConstrained Mux3 signals *).
