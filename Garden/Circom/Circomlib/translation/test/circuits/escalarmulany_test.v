(* Generated by Garden *)
Require Import Circom.M.

(* Template signals *)
Module MainSignals.
  Record t : Set := {
    (* Input *)
    e : F.t;
    (* Input *)
    p : list F.t;
    (* Output *)
    out : list F.t;
  }.

  Module IsNamed.
    Inductive P : forall (A : Set), (t -> A) -> string -> Prop :=
    | e : P _ e "e"
    | p : P _ p "p"
    | out : P _ out "out".
  End IsNamed.
End MainSignals.

(* Template body *)
Definition Main : M.t (BlockUnit.t Empty_set) :=
  M.template_body [] (
    (* Signal Input *)
    do~ M.declare_signal "e" in
    (* Signal Input *)
    do~ M.declare_signal "p" in
    (* Signal Output *)
    do~ M.declare_signal "out" in
    (* Component *)
    do~ M.declare_component "n2b" in
    do~ M.substitute_var "n2b" [] [[ M.call_function ~(| "Num2Bits", [ 253 ] |) ]] in
    (* Component *)
    do~ M.declare_component "escalarMulAny" in
    do~ M.substitute_var "escalarMulAny" [] [[ M.call_function ~(| "EscalarMulAny", [ 253 ] |) ]] in
    do~ M.substitute_var "escalarMulAny" [Access.Component "p"; Access.Array (0)] [[ M.var_access (| "p", [Access.Array (0)] |) ]] in
    do~ M.substitute_var "escalarMulAny" [Access.Component "p"; Access.Array (1)] [[ M.var_access (| "p", [Access.Array (1)] |) ]] in
    (* Var *)
    do~ M.declare_var "i" [[ ([] : list F.t) ]] in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    do~ M.substitute_var "n2b" [Access.Component "in"] [[ M.var (| "e" |) ]] in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), 253 |) ]] (
      do~ M.substitute_var "escalarMulAny" [Access.Component "e"; Access.Array (M.var (| "i" |))] [[ M.var_access (| "n2b", [Access.Component "out"; Access.Array (M.var (| "i" |))] |) ]] in
      do~ M.substitute_var "i" [] [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "out" [Access.Array (0)] [[ M.var_access (| "escalarMulAny", [Access.Component "out"; Access.Array (0)] |) ]] in
    do~ M.substitute_var "out" [Access.Array (1)] [[ M.var_access (| "escalarMulAny", [Access.Component "out"; Access.Array (1)] |) ]] in
    M.pure BlockUnit.Tt
  ).

(* Template not under-constrained *)
Definition Main_not_under_constrained e p : Prop :=
  exists! out,
  let signals := MainSignals.Build_t e p out in
  True (* NotUnderConstrained Main signals *).
