(* Generated by Garden *)
Require Import Garden.Garden.

(* Template signals *)
Module MainSignals.
  Record t : Set := {
    (* Input *)
    in_ : list F.t;
    (* Output *)
    out : list F.t;
  }.

  Module IsNamed.
    Inductive P : forall (A : Set), (t -> A) -> string -> Prop :=
    | in_ : P _ in_ "in"
    | out : P _ out "out".
  End IsNamed.
End MainSignals.

(* Template body *)
Definition Main : M.t (BlockUnit.t Empty_set) :=
  M.template_body [] (
    (* Signal Input *)
    do~ M.declare_signal "in" in
    (* Signal Output *)
    do~ M.declare_signal "out" in
    (* Component *)
    do~ M.declare_component "pedersen" in
    do~ M.substitute_var "pedersen" [] [[ M.call_function ~(| "Pedersen", [ InfixOp.mul ~(| 250, 2 |) ] |) ]] in
    (* Component *)
    do~ M.declare_component "n2b" in
    do~ M.substitute_var "n2b" [Access.Array (0)] [[ M.call_function ~(| "Num2Bits", [ 250 ] |) ]] in
    do~ M.substitute_var "n2b" [Access.Array (1)] [[ M.call_function ~(| "Num2Bits", [ 250 ] |) ]] in
    (* Var *)
    do~ M.declare_var "i" [[ ([] : list F.t) ]] in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    do~ M.substitute_var "n2b" [Access.Array (0); Access.Component "in"] [[ M.var_access (| "in", [Access.Array (0)] |) ]] in
    do~ M.substitute_var "n2b" [Access.Array (1); Access.Component "in"] [[ M.var_access (| "in", [Access.Array (1)] |) ]] in
    do~ M.substitute_var "i" [] [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), 250 |) ]] (
      do~ M.substitute_var "pedersen" [Access.Component "in"; Access.Array (M.var (| "i" |))] [[ M.var_access (| "n2b", [Access.Array (0); Access.Component "out"; Access.Array (M.var (| "i" |))] |) ]] in
      do~ M.substitute_var "pedersen" [Access.Component "in"; Access.Array (InfixOp.add ~(| 250, M.var (| "i" |) |))] [[ M.var_access (| "n2b", [Access.Array (1); Access.Component "out"; Access.Array (M.var (| "i" |))] |) ]] in
      do~ M.substitute_var "i" [] [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "out" [Access.Array (0)] [[ M.var_access (| "pedersen", [Access.Component "out"; Access.Array (0)] |) ]] in
    do~ M.substitute_var "out" [Access.Array (1)] [[ M.var_access (| "pedersen", [Access.Component "out"; Access.Array (1)] |) ]] in
    M.pure BlockUnit.Tt
  ).

(* Template not under-constrained *)
Definition Main_not_under_constrained in_ : Prop :=
  exists! out,
  let signals := MainSignals.Build_t in_ out in
  True (* NotUnderConstrained Main signals *).
