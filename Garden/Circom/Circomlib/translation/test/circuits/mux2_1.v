(* Generated by Garden *)
Require Import Garden.Garden.

(* Template signals *)
Module ConstantsSignals.
  Record t : Set := {
    out : list F.t;
  }.
End ConstantsSignals.

(* Template body *)
Definition Constants : M.t (BlockUnit.t Empty_set) :=
  (* Var *)
  do~ M.declare_var "i" [[ ([] : list F.t) ]] in
  do~ M.substitute_var "i" [[ 0 ]] in
  (* Signal Output *)
  do~ M.declare_signal "out" [[ [ 4 ] ]] in
  do~ M.substitute_var "out" [[ 37 ]] in
  do~ M.substitute_var "out" [[ 47 ]] in
  do~ M.substitute_var "out" [[ 53 ]] in
  do~ M.substitute_var "out" [[ 71 ]] in
  M.pure BlockUnit.Tt.

(* Template signals *)
Module MainSignals.
  Record t : Set := {
    selector : F.t;
    out : F.t;
  }.
End MainSignals.

(* Template body *)
Definition Main : M.t (BlockUnit.t Empty_set) :=
  (* Var *)
  do~ M.declare_var "i" [[ ([] : list F.t) ]] in
  do~ M.substitute_var "i" [[ 0 ]] in
  (* Signal Input *)
  do~ M.declare_signal "selector" [[ ([] : list F.t) ]] in
  (* Signal Output *)
  do~ M.declare_signal "out" [[ ([] : list F.t) ]] in
  (* Component *)
  do~ M.declare_component "mux" in
  do~ M.substitute_var "mux" [[ M.call_function ~(| "Mux2", ([] : list F.t) |) ]] in
  (* Component *)
  do~ M.declare_component "n2b" in
  do~ M.substitute_var "n2b" [[ M.call_function ~(| "Num2Bits", [ 2 ] |) ]] in
  (* Component *)
  do~ M.declare_component "cst" in
  do~ M.substitute_var "cst" [[ M.call_function ~(| "Constants", ([] : list F.t) |) ]] in
  do~ M.substitute_var "n2b" [[ M.var ~(| "selector" |) ]] in
  do~ M.substitute_var "i" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var ~(| "i" |), 2 |) ]] (
    do~ M.substitute_var "mux" [[ M.var_access ~(| "n2b", [Access.Component "out"; Access.Array (M.var ~(| "i" |))] |) ]] in
    do~ M.substitute_var "i" [[ InfixOp.add ~(| M.var ~(| "i" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  do~ M.substitute_var "i" [[ 0 ]] in
  do~ M.while [[ InfixOp.lesser ~(| M.var ~(| "i" |), 4 |) ]] (
    do~ M.substitute_var "mux" [[ M.var_access ~(| "cst", [Access.Component "out"; Access.Array (M.var ~(| "i" |))] |) ]] in
    do~ M.substitute_var "i" [[ InfixOp.add ~(| M.var ~(| "i" |), 1 |) ]] in
    M.pure BlockUnit.Tt
  ) in
  do~ M.substitute_var "out" [[ M.var_access ~(| "mux", [Access.Component "out"] |) ]] in
  M.pure BlockUnit.Tt.
