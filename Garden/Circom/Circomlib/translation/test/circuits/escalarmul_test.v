(* Generated by Garden *)
Require Import Garden.Garden.

(* Template signals *)
Module MainSignals.
  Record t : Set := {
    (* Input *)
    in_ : F.t;
    (* Output *)
    out : list F.t;
  }.
End MainSignals.

(* Template body *)
Definition Main : M.t (BlockUnit.t Empty_set) :=
  M.template_body [] (
    (* Signal Input *)
    do~ M.declare_signal "in" [[ ([] : list F.t) ]] in
    (* Signal Output *)
    do~ M.declare_signal "out" [[ [ 2 ] ]] in
    (* Var *)
    do~ M.declare_var "base" [[ [ 2 ] ]] in
    do~ M.substitute_var "base" [[ array_with_repeat (0) (2) ]] in
    do~ M.substitute_var "base" [[ [ 5299619240641551281634865583518297030282874472190772894086521144482721001553; 16950150798460657717958625567821834550301663161624707787222815936182638968203 ] ]] in
    (* Component *)
    do~ M.declare_component "n2b" in
    do~ M.substitute_var "n2b" [[ M.call_function ~(| "Num2Bits", [ 253 ] |) ]] in
    (* Component *)
    do~ M.declare_component "escalarMul" in
    do~ M.substitute_var "escalarMul" [[ M.call_function ~(| "EscalarMul", [ 253; M.var (| "base" |) ] |) ]] in
    do~ M.substitute_var "escalarMul" [[ 0 ]] in
    do~ M.substitute_var "escalarMul" [[ 1 ]] in
    (* Var *)
    do~ M.declare_var "i" [[ ([] : list F.t) ]] in
    do~ M.substitute_var "i" [[ 0 ]] in
    do~ M.substitute_var "n2b" [[ M.var (| "in" |) ]] in
    do~ M.substitute_var "i" [[ 0 ]] in
    do~ M.while [[ InfixOp.lesser ~(| M.var (| "i" |), 253 |) ]] (
      do~ M.substitute_var "escalarMul" [[ M.var_access (| "n2b", [Access.Component "out"; Access.Array (M.var (| "i" |))] |) ]] in
      do~ M.substitute_var "i" [[ InfixOp.add ~(| M.var (| "i" |), 1 |) ]] in
      M.pure BlockUnit.Tt
    ) in
    do~ M.substitute_var "out" [[ M.var_access (| "escalarMul", [Access.Component "out"; Access.Array (0)] |) ]] in
    do~ M.substitute_var "out" [[ M.var_access (| "escalarMul", [Access.Component "out"; Access.Array (1)] |) ]] in
    M.pure BlockUnit.Tt
  ).

(* Template not under-constrained *)
Definition Main_not_under_constrained in_ : Prop :=
  exists! out,
  let signals := MainSignals.Build_t in_ out in
  True (* NotUnderConstrained Main signals *).
